// <auto-generated />
using System;
using GeoGame.Entitities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoApi.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20181113104154_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GeoGame.Entitities.Models.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("AreaID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("GeoGame.Entitities.Models.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaID");

                    b.Property<DateTime>("CreatedAt");

                    b.HasKey("GameID");

                    b.HasIndex("AreaID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GeoGame.Entitities.Models.GamePlayer", b =>
                {
                    b.Property<string>("GamePlayerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GameID");

                    b.Property<int>("Score");

                    b.HasKey("GamePlayerID");

                    b.HasIndex("GameID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GeoGame.Entitities.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AreaID");

                    b.Property<float>("Lat");

                    b.Property<float>("Lng");

                    b.Property<string>("Name");

                    b.HasKey("LocationID");

                    b.HasIndex("AreaID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("GeoGame.Entitities.Models.Game", b =>
                {
                    b.HasOne("GeoGame.Entitities.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID");
                });

            modelBuilder.Entity("GeoGame.Entitities.Models.GamePlayer", b =>
                {
                    b.HasOne("GeoGame.Entitities.Models.Game")
                        .WithMany("Players")
                        .HasForeignKey("GameID");
                });

            modelBuilder.Entity("GeoGame.Entitities.Models.Location", b =>
                {
                    b.HasOne("GeoGame.Entitities.Models.Area")
                        .WithMany("PointofInterests")
                        .HasForeignKey("AreaID");
                });
#pragma warning restore 612, 618
        }
    }
}
